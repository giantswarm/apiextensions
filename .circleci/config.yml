version: 2.1

orbs:
  architect:
    commands:
      tools-info:
        steps:
          - run:
              name: Architect Version
              command: |
                architect version
          - run:
              name: Bash Version
              command: |
                echo $BASH_VERSION
          - run:
              name: Git Version
              command: |
                git version
          - run:
              name: Go Version
              command: |
                go version
          - run:
              name: Helm Version
              command: |
                helm version -c
      go-cache-save:
        steps:
          - save_cache:
              key: go-build-v1-legacy-{{ checksum "Gopkg.lock" }}
              paths:
                - "/go/pkg/dep"
      go-cache-restore:
        steps:
          - restore_cache:
              keys:
                - go-build-v1-legacy-{{ checksum "Gopkg.lock" }}
      go-test-legacy:
        steps:
          - run:
              name: Install dep
              command: |
                go get github.com/golang/dep/cmd/dep
          - run:
              name: Dep ensure
              command: |
                /home/circleci/go/bin/dep ensure && git diff --exit-code
          - run:
              name: Install goimports
              command: |
                go get golang.org/x/tools/cmd/goimports
          - run:
              name: Check If Imports Are Properly Sorted
              command: |
                if [[ -n $(goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -l .) ]];
                  then goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -d . && exit 1;
                fi
          - run:
              name: Go Fmt
              command: |
                test -z $(gofmt -l .) || gofmt -d .
          - run:
              name: Go Vet
              command: |
                CGO_ENABLED=0 go vet ./...
          - run:
              name: Go Test
              command: |
                CGO_ENABLED=0 go test ./...
      go-build-legacy:
        steps:
          - go-test-legacy
          - run:
              name: Compile Binary
              command: |
                architect build
      go-deploy-legacy:
        steps:
          - run:
              name: Deploy using architect
              command: |
                architect deploy
    executors:
      architect:
        docker:
          - entrypoint: /bin/bash
            image: quay.io/giantswarm/architect:latest
    jobs:
      go-test-legacy:
        parameters:
          working_directory:
            type: string
        description: |
          This job checks if `dep ensure` makes any changes indicating that the dependencies
          are out of sync and runs goimports to ensure that imports are correctly sorted
          and grouped. After this, code is checked for correct formatting by `go fmt`
          checked for semantic issues with `go vet` and for passing unit tests with
          `go test` It also injects following variables into the
          "github.com/ORGANIZATION/REPOSITORY/pkg/project" package for testing:

          - "buildTimestamp" in RFC-3339 format in UTC time zone.
          - "gitSHA" SHA of the built commit.
          - "version" produced by `architect project version` command.
        executor: architect
        working_directory: << parameters.working_directory >>
        steps:
          - checkout
          - tools-info
          - go-cache-restore
          - go-test-legacy
          - go-cache-save
      go-build-legacy:
        parameters:
          working_directory:
            type: string
        executor: architect
        working_directory: << parameters.working_directory >>
        steps:
          - checkout
          - tools-info
          - go-cache-restore
          - go-build-legacy
          - go-cache-save
      go-deploy-legacy:
        parameters:
          working_directory:
            type: string
        executor: architect
        working_directory: << parameters.working_directory >>
        steps:
          - go-cache-restore
          - go-deploy-legacy
          - go-cache-save

workflows:
  workflow:
    jobs:
      - architect/go-build-legacy:
          name: go-build-apiextensions
          working_directory: /go/src/github.com/giantswarm/apiextensions
      - architect/go-deploy-legacy:
          name: go-deploy-apiextensions
          working_directory: /go/src/github.com/giantswarm/apiextensions
          requires:
            - go-build-apiextensions
          filters:
            branches:
              only: master
