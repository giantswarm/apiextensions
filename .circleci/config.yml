version: 2.1

orbs:
  version:
    commands:
      check-file-changes:
        steps:
          - run:
              name: "Check if files VERSION and CHANGELOG.md are modified"
              command: |
                  set -o errexit
                  set -o nounset
                  set -o pipefail

                  echo_green() {
                      echo -e "\e[32m${1}"
                  }
                  echo_red() {
                      echo -e "\e[31m${1}"
                  }
                  echo_yellow() {
                      echo -e "\e[33m${1}"
                  }

                  if [ ! -f ./VERSION ]; then
                      echo_red "error: file ./VERSION does not exist" >&2
                      exit 0
                  fi

                  # CHANGELOG.md file must exist when VERSION file exists.
                  if [ ! -f ./CHANGELOG.md ]; then
                      echo_red "error: file ./CHANGELOG.md does not exist" >&2
                      exit 1
                  fi

                  # On the master branch the head is previous commit. On a feature
                  # branch it's the master branch.
                  head="master"
                  if [ "${CIRCLE_BRANCH}" == "master" ]; then
                      head="HEAD~1"
                  fi

                  # Check if VERSION file was changed.
                  if git diff --name-only origin/${head} -- ./VERSION | grep VERSION >/dev/null ; then
                      echo_green "ok: file VERSION changed in this PR"
                  else
                      echo_green "ok: file VERSION did not change in this PR" >&2
                      exit 1
                  fi

                  # Check if CHAGNELOG.md file was changed.
                  if git diff --name-only origin/${head} -- ./CHANGELOG.md | grep CHANGELOG.md  >/dev/null ; then
                      echo_green "ok: file CHANGELOG.md changed in this PR"
                  else
                      echo_red "error: file CHANGELOG.md did not change in this PR" >&2
                      exit 1
                  fi

      tag-master-branch:
        steps:
          - run:
              name: "When on master branch tag the commit with content of the VERSION file"
              command: |
                  set -o errexit
                  set -o nounset
                  set -o pipefail

                  echo_green() {
                      echo -e "\e[32m${1}"
                  }
                  echo_red() {
                      echo -e "\e[31m${1}"
                  }
                  echo_yellow() {
                      echo -e "\e[33m${1}"
                  }

                  if [ ! -f ./VERSION ]; then
                      echo_red "error: file ./VERSION does not exist"
                      exit 1
                  fi
                  if [ "${CIRCLE_BRANCH}" != "master" ]; then
                      echo_yellow "stopping execution: non-master branch"
                      exit 0
                  fi

                  version="$(cat ./VERSION)"

                  git tag ${version} ${CIRCLE_SHA1}
                  git push --tags

                  echo_green "ok: tagged commit ${CIRCLE_SHA1} with version ${version}"


    executors:
      alpine:
        docker:
          - image: circleci/golang:1.12.4

    jobs:
      check:
        executor: alpine
        steps:
          - checkout
          - check-file-changes
          - tag-master-branch

jobs:
  build:
    machine: true
    steps:
      - checkout

      - run: |
          wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
          chmod +x ./architect
          ./architect version
      - run: ./architect build
      - store_test_results:
          path: /tmp/results
      - deploy:
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ./architect deploy
            fi

workflows:
  version-check-build:
    jobs:
      - version/check:
          name: version-check
      - build
