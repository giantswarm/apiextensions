version: 2.1

orbs:
  architect:
    commands:
      go-architect:
        parameters:
          command:
            type: "string"
        steps:
          - run:
              name: Deploying Using Architect
              command: |
                docker run \
                  -e CIRCLE_PROJECT_REPONAME \
                  -e CIRCLE_PROJECT_USERNAME \
                  -e CIRCLECI \
                  -e QUAY_USERNAME \
                  -e QUAY_PASSWORD \
                  -e DEPLOYMENT_EVENTS_TOKEN \
                  -e CGO_ENABLED=0 \
                  -v /home/circleci/project:/home/circleci/project \
                  -v /var/run/docker.sock:/var/run/docker.sock \
                  -w /home/circleci/project \
                  quay.io/giantswarm/architect << parameters.command >>
      go-cache-restore:
        parameters:
          lockfile:
            type: "string"
            default: "go.sum"
        steps:
          - restore_cache:
              keys:
                - go-build-go-mod-v1-{{ checksum << parameters.lockfile >> }}
      go-cache-save:
        parameters:
          lockfile:
            type: "string"
            default: "go.sum"
        steps:
          - save_cache:
              key: go-build-go-mod-v1-{{ checksum << parameters.lockfile >> }}
              paths:
                - "/go/pkg/dep"
                - "/go/pkg/mod"
      go-test-legacy:
        steps:
          - run:
              name: Configure Go Environment
              command: |
                mkdir -p /go/src/github.com/${CIRCLE_PROJECT_USERNAME}
                ln -s /go/src/project /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
          - run:
              name: Installing Dep
              command: |
                go get github.com/golang/dep/cmd/dep
          - run:
              name: Running Dep Ensure
              command: |
                export DEPPROJECTROOT=github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
                dep ensure && git diff --exit-code
          - run:
              name: Installing Goimports
              command: |
                go get golang.org/x/tools/cmd/goimports
          - run:
              name: Deleting Vendor Directory
              command: |
                rm -rf vendor/
          - run:
              name: Ensuring Imports Are Properly Sorted
              command: |
                export PACKAGE=github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
                if [[ -n $(goimports -local $PACKAGE -l .) ]];
                  then goimports -local $PACKAGE -d . && exit 1;
                fi
          - run:
              name: Running Go Fmt
              command: |
                test -z $(gofmt -l .) || gofmt -d .
          - run:
              name: Restoring Vendor Directory
              command: |
                git checkout vendor/
          - run:
              name: Running Go Vet
              command: |
                cd /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
                CGO_ENABLED=0 go vet ./...
          - run:
              name: Running Go Test
              command: |
                cd /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
                CGO_ENABLED=0 go test ./...
      tools-info:
        steps:
          - run:
              name: Showing Architect Version
              command: |
                architect version
          - run:
              name: Showing Bash Version
              command: |
                echo $BASH_VERSION
          - run:
              name: Showing Git Version
              command: |
                git version
          - run:
              name: Showing Go Version
              command: |
                go version
          - run:
              name: Showing Helm Version
              command: |
                helm version -c
    executors:
      architect:
        docker:
          - entrypoint: /bin/bash
            image: quay.io/giantswarm/architect:latest
    jobs:
      go-architect:
        description: |
          This job runs the given command for the current project from a container
          using the `latest` architect image and ultimately calling `architect <command>`.
        machine: true
        parameters:
          command:
            description: "Command to be run by architect. Should usually be 'build' or 'deploy'."
            type: "string"
        steps:
          - checkout
          - go-architect:
              command: << parameters.command >>
      description: |
        This job checks if `dep ensure` makes any changes indicating that the dependencies
        are out of sync and runs goimports to ensure that imports are correctly sorted
        and grouped. After this, code is checked for correct formatting by `go fmt`
        checked for semantic issues with `go vet` and for passing unit tests with
        `go test`.
      executor: architect
      steps:
        - checkout
        - tools-info
        - go-cache-restore:
            lockfile: Gopkg.lock
        - go-test-legacy
        - go-cache-save:
            lockfile: Gopkg.lock
      working_directory: /go/src/project

workflows:
  workflow:
    jobs:
      - architect/go-test-legacy:
          name: test
      - architect/go-architect:
          name: build
          command: build
          requires:
            - test
      - architect/go-architect:
          name: deploy
          command: deploy
          requires:
            - build
          filters:
            branches:
              only: master
