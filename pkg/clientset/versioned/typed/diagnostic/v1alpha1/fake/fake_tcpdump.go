/*
Copyright 2019 Giant Swarm GmbH.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/giantswarm/apiextensions/pkg/apis/diagnostic/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTcpdumps implements TcpdumpInterface
type FakeTcpdumps struct {
	Fake *FakeDiagnosticV1alpha1
	ns   string
}

var tcpdumpsResource = schema.GroupVersionResource{Group: "diagnostic.giantswarm.io", Version: "v1alpha1", Resource: "tcpdumps"}

var tcpdumpsKind = schema.GroupVersionKind{Group: "diagnostic.giantswarm.io", Version: "v1alpha1", Kind: "Tcpdump"}

// Get takes name of the tcpdump, and returns the corresponding tcpdump object, and an error if there is any.
func (c *FakeTcpdumps) Get(name string, options v1.GetOptions) (result *v1alpha1.Tcpdump, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tcpdumpsResource, c.ns, name), &v1alpha1.Tcpdump{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Tcpdump), err
}

// List takes label and field selectors, and returns the list of Tcpdumps that match those selectors.
func (c *FakeTcpdumps) List(opts v1.ListOptions) (result *v1alpha1.TcpdumpList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tcpdumpsResource, tcpdumpsKind, c.ns, opts), &v1alpha1.TcpdumpList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.TcpdumpList{ListMeta: obj.(*v1alpha1.TcpdumpList).ListMeta}
	for _, item := range obj.(*v1alpha1.TcpdumpList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tcpdumps.
func (c *FakeTcpdumps) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tcpdumpsResource, c.ns, opts))

}

// Create takes the representation of a tcpdump and creates it.  Returns the server's representation of the tcpdump, and an error, if there is any.
func (c *FakeTcpdumps) Create(tcpdump *v1alpha1.Tcpdump) (result *v1alpha1.Tcpdump, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tcpdumpsResource, c.ns, tcpdump), &v1alpha1.Tcpdump{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Tcpdump), err
}

// Update takes the representation of a tcpdump and updates it. Returns the server's representation of the tcpdump, and an error, if there is any.
func (c *FakeTcpdumps) Update(tcpdump *v1alpha1.Tcpdump) (result *v1alpha1.Tcpdump, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tcpdumpsResource, c.ns, tcpdump), &v1alpha1.Tcpdump{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Tcpdump), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeTcpdumps) UpdateStatus(tcpdump *v1alpha1.Tcpdump) (*v1alpha1.Tcpdump, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(tcpdumpsResource, "status", c.ns, tcpdump), &v1alpha1.Tcpdump{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Tcpdump), err
}

// Delete takes name of the tcpdump and deletes it. Returns an error if one occurs.
func (c *FakeTcpdumps) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tcpdumpsResource, c.ns, name), &v1alpha1.Tcpdump{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTcpdumps) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tcpdumpsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.TcpdumpList{})
	return err
}

// Patch applies the patch and returns the patched tcpdump.
func (c *FakeTcpdumps) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Tcpdump, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tcpdumpsResource, c.ns, name, pt, data, subresources...), &v1alpha1.Tcpdump{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Tcpdump), err
}
