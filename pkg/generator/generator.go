//go:generate go run gen.go
/*
Copyright 2015 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"flag"
	"fmt"
	"github.com/giantswarm/apiextensions/pkg/generator/clientset"
	"github.com/giantswarm/apiextensions/pkg/generator/crd"
	"github.com/giantswarm/apiextensions/pkg/generator/deepcopy"
	clientsetargs "k8s.io/code-generator/cmd/client-gen/args"
	deepcopyargs "k8s.io/code-generator/cmd/deepcopy-gen/args"
	"k8s.io/klog"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"k8s.io/code-generator/cmd/client-gen/types"
	"k8s.io/gengo/args"
)

const (
	toolName = "apiextensions/generator"
	apisDirectory = "./pkg/apis"
	generatedDirectory = "./pkg/generated"
	boilerplatePath = "./pkg/generator/boilerplate.go.txt"
	rootPackage = "github.com/giantswarm/apiextensions"

	clientsetDirectory = "./pkg/clientset"
	clientsetName = "versioned"
	clientsetBuildTag = "generated_clientset"

	deepcopyBaseName = "zz_generated.deepcopy"
	deepcopyBuildTag = "generated_deepcopy"
)

func listGroups() ([]types.GroupVersions, error) {
	var groupVersions []types.GroupVersions
	groupVersionVersions := map[string][]types.PackageVersion{}
	err := filepath.Walk(strings.TrimPrefix(apisDirectory, "./"), func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			return nil
		}
		split := strings.Split(path, string(filepath.Separator))
		if len(split) != 4 {
			return nil
		}
		group := split[2]
		version := split[3]
		versionGroupVersions, ok := groupVersionVersions[group]
		if !ok {
			groupVersions = append(groupVersions, types.GroupVersions{
				PackageName: group,
				Group:       types.Group(group),
			})
		}
		groupVersionVersions[group] = append(versionGroupVersions, types.PackageVersion{
			Version: types.Version(version),
			Package: canonicalizePackage(apisDirectory, group, version),
		})
		return nil
	})
	if err != nil {
		return nil, err
	}
	for i, group := range groupVersions {
		groupVersions[i].Versions = groupVersionVersions[string(group.Group)]
	}
	return groupVersions, nil
}

func initKlog(level int) error {
	flagSet := flag.FlagSet{}
	klog.InitFlags(&flagSet)
	if err := flagSet.Set("v", strconv.Itoa(level)); err != nil {
		return err
	}
	if err := flagSet.Parse(nil); err != nil {
		return err
	}
	return nil
}

func canonicalizePackage(elem... string) string {
	components := []string{rootPackage}
	for _, component := range elem {
		components = append(components, strings.TrimPrefix(component, "./"))
	}
	return filepath.Join(components...)
}

func initializeInputs() (args.GeneratorArgs, []types.GroupVersions, error) {
	err := initKlog(10)
	if err != nil {
		log.Fatal(err)
	}

	groups, err := listGroups()
	if err != nil {
		return args.GeneratorArgs{}, nil, err
	}

	var inputDirs []string
	for _, group := range groups {
		for _, version := range group.Versions {
			inputDirs = append(inputDirs, version.Package)
		}
	}

	genericArgs := args.GeneratorArgs{
		InputDirs:                  inputDirs,
		OutputBase:                 generatedDirectory,
		GoHeaderFilePath:           boilerplatePath,
		GeneratedByCommentTemplate: fmt.Sprintf("// Code generated by %s. DO NOT EDIT.", toolName),
		VerifyOnly:                 false,
		IncludeTestFiles:           false,
	}

	return genericArgs, groups, nil
}

func main() {
	genericArgs, groups, err := initializeInputs()
	if err != nil {
		log.Fatal(err)
	}

	err = crd.Generate(genericArgs, groups)
	if err != nil {
		log.Fatal(err)
	}

	genericArgs.GeneratedBuildTag = deepcopyBuildTag
	genericArgs.OutputFileBaseName = deepcopyBaseName
	genericArgs.CustomArgs = &deepcopyargs.CustomArgs{
		BoundingDirs: []string{apisDirectory},
	}
	err = deepcopy.Generate(genericArgs, groups)
	if err != nil {
		log.Fatal(err)
	}

	genericArgs.GeneratedBuildTag = clientsetBuildTag
	genericArgs.OutputPackagePath = canonicalizePackage(clientsetDirectory)
	genericArgs.CustomArgs = &clientsetargs.CustomArgs{
		Groups:                 groups,
		ClientsetName:          clientsetName,
		ClientsetAPIPath:       "/apis",
		ClientsetOnly:          false,
		FakeClient:             true,
	}
	err = clientset.Generate(genericArgs)
	if err != nil {
		log.Fatal(err)
	}
}